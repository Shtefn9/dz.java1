import java.time.LocalDate;
import java.util.*;
public class Transfer implements Comparable<Transfer> {
    private Account sender, receiver;
    private LocalDate date;
    private int amount;

    public Transfer(int day, int month, int year, Account sender, Account receiver, int amount) {
        this.sender = sender;
        this.receiver = receiver;
        this.date = LocalDate.of(year, month, day);
        this.amount = amount;
    }

    public Account getReceiver() {
        return receiver;
    }

    public Account getSender() {
        return sender;
    }

    public int getAmount() {
        return amount;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setSender(Account sender) {
        this.sender = sender;
    }

    public void setReceiver(Account receiver) {
        this.receiver = receiver;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public int commitTransfer() {
        if (this.sender.getBalance() >= this.amount) {
            this.sender.setBalance(this.sender.getBalance() - this.amount);
            this.receiver.setBalance((this.receiver.getBalance() + this.amount));
            return 1;
        } else return 0;
    }
    public boolean detailedCommitTransfer() {
        if (this.sender.getBalance() >= this.amount) {
            this.sender.setBalance(this.sender.getBalance() - this.amount);
            this.receiver.setBalance((this.receiver.getBalance() + this.amount));
            System.out.printf("Перевод %d с аккаунта %d на аккаунт %d ",this.amount, this.sender.getId(), this.receiver.getId());
            return true;
        } else {System.out.printf("Неудачная попытка перевода %d с аккаунта %d на аккаунт %d ",this.amount, this.sender.getId(), this.receiver.getId());
        return false;}
    }
    @Override
    public int compareTo(Transfer otherTransfer) {
        return getDate().compareTo(otherTransfer.getDate());
    }
}
